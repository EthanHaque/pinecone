[project]
name = "pinecone"
version = "0.0.1"
authors = [
  { name="Ethan Haque", email="ethan.k.haque@gmail.com" },
]
description="A prototype clone of Pine."
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "structlog",
    "flask",
    "dotenv",
]


[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov"
]
dev = [
    "pinecone[test]",
    "mypy",
]

[build-system]
requires = ["hatchling >= 1.26"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
log_cli_level = "info"
testpaths = [
    "tests",
]


[tool.mypy]
mypy_path = ["src"]
files = ["src", "tests"]
python_version = "3.13"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.ruff]
line-length = 120
target-version = "py313"

[tool.ruff.lint]
extend-select = [
    "ERA001",      # Found commented-out code
    "YTT",         # flake8-2020
    "ANN",         # flake8-annotations
    "ASYNC",       # flake8-async
    "S",           # flake8-bandit
    "BLE001",      # Do not catch blind exception
    "B",           # flake8-bugbear
    "A",           # flake8-builtins
    "C4",          # flake8-comprehensions
    "DTZ",         # flake8-datetimez
    "T100",        # Debugger calls and imports
    "EM",          # flake8-errmsg
    "FIX",         # flake8-fixme
    "ICN",         # flake8-import-conventions
    "PIE",         # flake8-pie
    "T20",         # flake8-print
    "PYI",         # flake8-pyi
    "PT",          # flake8-pytest-style
    "Q",           # flake8-quotes
    "RSE102",      # flake8-raise
    "RET",         # flake8-return
    "SLF",         # Private member accessed
    "SIM",         # flake8-simplify
    "SLOT",        # flake8-slots
    "TID",         # flake8-tidy-imports
    "TD",          # flake8-todos
    "TC",          # flake8-type-checking
    "ARG",         # flake8-unused-arguments
    "PTH",         # flake8-use-pathlib
    "FLY",         # flynt
    "I",           # isort
    "C90",         # mccabe
    "NPY",         # NumPy-specific rules
    "PD",          # pandas-vet
    "N",           # pep8-naming
    "PERF",        # perflint
    "E",           # pycodestyle error
    "W",           # pycodestyle warning
    "D",           # pydocstyle
    "F",           # Pyflakes
    "PGH",         # pygrep-hooks
    "PL",          # pylint
    "PLE",         # Error
    "PLR",         # Refactor
    "PLW",         # Warning
    "UP",          # pyupgrade
    "FURB",        # refurb
    "RUF",         # Ruff-specific
]
ignore = [
    "PLR",    # Design related pylint codes
    "RUF012", # Would require a lot of ClassVar's
    "E501",   # Handled by formatter
    "S101",   # Allow `assert` in tests
    "ARG001", # Allow unused arguments
    "ARG002", # It's fine for fixture arguments to be unused.
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.Callable".msg = "Use collections.abc.Callable instead."
"typing.Iterator".msg = "Use collections.abc.Iterator instead."
"typing.Mapping".msg = "Use collections.abc.Mapping instead."
"typing.Sequence".msg = "Use collections.abc.Sequence instead."
"typing.Set".msg = "Use collections.abc.Set instead."
"importlib.abc".msg = "Use sp_repo_review._compat.importlib.resources.abc instead."
"importlib.resources.abc".msg = "Use sp_repo_review._compat.importlib.resources.abc instead."

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true

[tool.coverage.report]
exclude_also = [
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]
